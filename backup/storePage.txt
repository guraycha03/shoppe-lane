import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import ProductCard from '../components/ProductCard';
import useFollowState from '../hooks/useFollowState';
import SellerInfoBox from '../components/SellerInfoBox';

function StorePage({
    isLoggedIn,
    currentUser,
    handleAddToCart,
    likedProducts,
    toggleLike,
    renderStars,
    addingToCartId,
    triggerFlyToCartAnimation,
    showNotification
  }) {

  const [isFollowing, setIsFollowing] = useState(false);
  const { sellerId } = useParams();
  const navigate = useNavigate();
  const [products, setProducts] = useState([]);
  const [sellerData, setSellerData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const slugify = (str) =>
    str?.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');

  useEffect(() => {
    setLoading(true);
    setError(null);

    axios
      .get('https://687c9936918b6422432ebfe8.mockapi.io/api/products')
      .then(res => {
        const sellerProducts = res.data.filter(
            p => slugify(p.seller) === sellerId
          );
          
        setProducts(sellerProducts);

        if (sellerProducts.length > 0) {
          setSellerData({
            name: sellerProducts[0].seller,
            id: sellerProducts[0].sellerId, 
            totalProducts: sellerProducts.length
          });
          
                       
        } else {
          setSellerData(null);
        }

        setLoading(false);
      })
      .catch(err => {
        console.error('Failed to fetch seller products:', err);
        setError('Failed to load store. Please try again later.');
        setLoading(false);
      });
  }, [sellerId]);

  return (
    <div className="container py-4">
      {/* Back Button */}
      <button className="btn btn-outline-secondary mb-4" onClick={() => navigate(-1)}>
        ‚Üê Back
      </button>

      {/* Seller Info */}
      {sellerData?.id && (
        <div className="mb-4">
          <SellerInfoBox
            seller={{
              sellerId: products[0]?.sellerId, 
              name: products[0]?.seller,
              id: products[0]?.sellerId,     
              totalProducts: products.length
            }}
            isLoggedIn={isLoggedIn}
            currentUser={currentUser?.username}
          />

          <div className="text-muted mt-2">
            <i className="bi bi-box-seam me-1"></i>
            {sellerData.totalProducts} products listed
          </div>
        </div>
      )}

      {/* Loading or Error */}
      {loading && (
        <div className="d-flex justify-content-center align-items-center flex-column py-5">
          <i
            className="bi bi-bag-heart-fill mb-3"
            style={{
              fontSize: '3rem',
              color: '#8B6F52',
              animation: 'pulse 1.2s infinite ease-in-out',
            }}
          ></i>
          <div className="fw-semibold" style={{ color: '#8B6F52' }}>
            Loading {sellerData?.name ? `${sellerData.name}'s Store` : 'Store'}...
          </div>

          <style>
            {`
              @keyframes pulse {
                0% { transform: scale(1); opacity: 0.7; }
                50% { transform: scale(1.2); opacity: 1; }
                100% { transform: scale(1); opacity: 0.7; }
              }
            `}
          </style>
        </div>
      )}


      {error && <p className="text-danger">{error}</p>}

      {/* Product Grid */}
      <div className="row g-4">
        {!loading && !error && products.length > 0 ? (
          products.map(product => (
            <div key={product.id} className="col-6 col-sm-4 col-md-3 col-lg-3">

                <ProductCard
                product={product}
                handleAddToCart={handleAddToCart}
                likedProducts={likedProducts}
                toggleLike={toggleLike}
                renderStars={renderStars}
                addingToCartId={addingToCartId}
                triggerFlyToCartAnimation={triggerFlyToCartAnimation}
                isLoggedIn={isLoggedIn}
                showNotification={showNotification}
                size="small"
                forceShowCartButton
                />

            </div>
          ))       
          
        ) : !loading && !error ? (
          <p>No products found for this seller.</p>
        ) : null}
      </div>
    </div>
  );
}

export default StorePage;